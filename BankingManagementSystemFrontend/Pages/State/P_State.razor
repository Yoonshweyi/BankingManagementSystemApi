@using BankingManagementSystemFrontend.Model.State
@using MudBlazor
@page "/state"

@if(ResponseModel is not null)
{
    int count = 0;
    <NavLink href="setup/State/create" class="btn btn-success">Create</NavLink>
                  
        <table class="table">
        <thead>
            <tr>
                <th scope="col">#</th>
                <th scope="col">StateCode</th>
                <th scope="col">StateName</th>
                <th scope="col">Action</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var item in ResponseModel.Data)
            {
                <tr>
                    <th scope="row">@(++count)</th>
                    <td>@item.StateCode</td>
                    <td>@item.StateName</td>
                    <td>
                        <a class="btn btn-warning" href=@($"/Setup/State/Edit/{item.StateCode}")>
                            <i class="fa-solid fa-pen-to-square"></i>Edit
                        </a>
                        <button type="button" class="btn btn-danger" @onclick="() => IsConfirmed(item.StateCode)">Delete</button>
                    </td>
                </tr>
            }
        </tbody>
       
    </table>
   
}



@code {

    // private StateListResponseModel? ResponseModel;
    // protected override async Task OnAfterRenderAsync(bool firstRender)
    // {
    //     if (firstRender)
    //     {
            
    //         await List();
           
    //     }
    // }

    // private async Task List()
    // {
    //     ResponseModel = await httpClientService.ExecuteAsync<StateListResponseModel>
    //     (Endpoints.State, EnumHttpMethod.Get);
    //     StateHasChanged();
      
    // }

    //   private async Task IsConfirmed(string stateCode)
    //   {
    //     await DeleteStateAsync(stateCode);
        
    //  }

    // private async Task DeleteStateAsync(string stateCode)
    // {
    //     var response = await httpClientService.ExecuteAsync<StateResponeModel>(
    //         $"{Endpoints.State}/{stateCode}", EnumHttpMethod.Delete);
        
       
    //     if (response.IsSuccess)
    //     {
    //         await List();
          
    //     }
    //     else
    //     {
    //         // Handle error
    //         Console.WriteLine($"Error deleting state: {response.Message}");
    //     }
    //     StateHasChanged();
        
    // }


    
}
